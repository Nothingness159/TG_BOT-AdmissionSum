from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from typing import Dict, List, Optional
import logging 
from urllib.parse import unquote
from bot.keyboards import BotKeyboards
from bot.utils import (
    calculate_chance,
    get_directions_data,
    calculate_total_score,
    validate_user_score,
    get_achievements_points
)
logger = logging.getLogger(__name__)
router = Router()
storage = MemoryStorage()

# -------------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -------------------------------

STAGE_FORM = "form"
STAGE_SUBJECTS = "subjects"
STAGE_EGE_SCORE = "ege_score"
STAGE_ACHIEVEMENTS = "achievements"
STAGE_RESULTS = "results"

user_data = {}  # user_id -> { stage, form, subjects, ege_score, achievements }

# -------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# -------------------------------

@router.message(F.text == "/start")
async def start_command(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "stage": STAGE_FORM,
        "form": None,
        "subjects": [],
    }
    await message.answer(
        "üéì –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=BotKeyboards.get_form_keyboard()
    )

# -------------------------------
# –í—ã–±–æ—Ä —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
# -------------------------------

@router.callback_query(F.data.startswith("form:"))
async def select_form(callback: CallbackQuery):
    form = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user_data[user_id]["form"] = form
    keyboard = BotKeyboards.get_form_keyboard(selected_form=form)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data == "confirm_form")
async def confirm_form(callback: CallbackQuery):
    user_id = callback.from_user.id
    selected_form = user_data[user_id].get("form")
    if not selected_form:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è!", show_alert=True)
        return
    user_data[user_id]["stage"] = STAGE_SUBJECTS
    text = "üìò –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–º–∏–Ω–∏–º—É–º 1):"
    keyboard = BotKeyboards.get_subjects_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)

# -------------------------------
# –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
# -------------------------------

@router.callback_query(F.data.startswith("subject:"))
async def select_subject(callback: CallbackQuery):
    subject = callback.data.split(":")[1]
    user_id = callback.from_user.id
    subjects = user_data[user_id]["subjects"]

    if subject in subjects:
        subjects.remove(subject)
    else:
        if len(subjects) >= 4:
            await callback.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 4 –¥–æ–ø. –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
            return
        subjects.append(subject)

    keyboard = BotKeyboards.get_subjects_keyboard(selected_subjects=subjects)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data == "confirm_subjects")
async def confirm_subjects(callback: CallbackQuery):
    user_id = callback.from_user.id
    subjects = user_data[user_id]["subjects"]
    if not subjects:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.", show_alert=True)
        return
    user_data[user_id]["stage"] = STAGE_EGE_SCORE
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª –ï–ì–≠ (–æ—Ç 120 –¥–æ 310):")

# -------------------------------
# –í–≤–æ–¥ –±–∞–ª–ª–æ–≤ –ï–ì–≠
# -------------------------------

@router.message(F.text)
async def process_ege_score(message: Message):
    user_id = message.from_user.id
    if user_data.get(user_id, {}).get("stage") != STAGE_EGE_SCORE:
        return

    try:
        score = validate_user_score(message.text)
        user_data[user_id]["ege_score"] = score
        user_data[user_id]["stage"] = STAGE_ACHIEVEMENTS

        await message.answer(
            "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:",
            reply_markup=BotKeyboards.get_achievements_keyboard()
        )
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# -------------------------------
# –í—ã–±–æ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
# -------------------------------

@router.callback_query(F.data.startswith("achievement:"))
async def select_achievement(callback: CallbackQuery):
    achievement = callback.data.split(":")[1]
    user_id = callback.from_user.id

    current_achievements = user_data[user_id].setdefault("selected_achievements", [])

    if achievement in current_achievements:
        current_achievements.remove(achievement)
    else:
        current_achievements.append(achievement)

    keyboard = BotKeyboards.get_achievements_keyboard(selected_achievements=current_achievements)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data == "confirm_achievements")
async def confirm_achievements(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all(k in user_data[user_id] for k in ["ege_score", "form", "subjects"]):
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å /start", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        ege_score = user_data[user_id]["ege_score"]
        achievements = user_data[user_id].get("selected_achievements", [])
        form = user_data[user_id]["form"]
        subjects = user_data[user_id]["subjects"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        total_score = calculate_total_score(
            ege_score,
            get_achievements_points(achievements)
        )
        user_data[user_id]["total_score"] = total_score
        user_data[user_id]["stage"] = STAGE_RESULTS

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        directions = get_directions_data(subjects, form)
        if not directions:
            await callback.message.edit_text(
                "üòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=BotKeyboards.get_back_keyboard()
            )
            return

        user_data[user_id]["directions"] = directions
        keyboard = BotKeyboards.get_directions_keyboard(directions)
        await callback.message.edit_text(
            "üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {str(e)}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# -------------------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
# -------------------------------
@router.callback_query(F.data.startswith("direction:"))
async def direction_details(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        direction_code = callback.data.split(":", 1)[1].strip()

        details = calculate_chance(
            user_data[user_id]["total_score"],
            direction_code,
            user_data[user_id]["form"]
        )

        await callback.message.edit_text(details, reply_markup=BotKeyboards.get_direction_details_keyboard(), parse_mode="HTML")
    except ValueError as e:
        await callback.answer(str(e), show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# -------------------------------
# –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", "–í—ã—Ö–æ–¥"
# -------------------------------

@router.callback_query(F.data == "back_to_form")
async def back_to_form(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data.pop(user_id, None)
    await start_command(callback.message)

@router.callback_query(F.data == "back_to_subjects")
async def back_to_subjects(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id]["stage"] = STAGE_SUBJECTS
    subjects = user_data[user_id].get("subjects", [])
    await callback.message.edit_text(
        "üìò –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–º–∏–Ω–∏–º—É–º 1):",
        reply_markup=BotKeyboards.get_subjects_keyboard(selected_subjects=subjects)
    )

@router.callback_query(F.data == "back_to_achievements")
async def back_to_achievements(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id]["stage"] = STAGE_ACHIEVEMENTS
    await callback.message.edit_text(
        "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:",
        reply_markup=BotKeyboards.get_achievements_keyboard()
    )

@router.callback_query(F.data == "back_to_directions")
async def back_to_directions(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id]["stage"] = STAGE_RESULTS
    directions = user_data[user_id].get("directions", [])
    await callback.message.edit_text(
        "üéØ –í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=BotKeyboards.get_directions_keyboard(directions)
    )

@router.callback_query(F.data == "exit")
async def exit_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    await callback.message.edit_text("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
